name: CI Dev

on:
  push:
    branches: ["dev"]

jobs:
  linter-code:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.18]
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - name: Run linter
        run: pnpm lint
  deploy:
    name: Build and deploy Dev Container
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub //TODO user own registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DEV_DOCKER_USERNAME }}
          password: ${{ secrets.DEV_DOCKER_PASSWORD }}

      - name: Build with Docker Compose
        run: |
          touch .env
          echo APP_NAME="${{ vars.APP_NAME }}" >> .env
          echo APP_ENV="${{ vars.APP_ENV }}" >> .env
          echo APP_PORT="${{ vars.APP_PORT }}" >> .env
          echo WEBSOCKET_PORT="${{ vars.WEBSOCKET_PORT }}" >> .env
          echo DB_HOST="${{ vars.DB_HOST }}" >> .env
          echo DB_PORT="${{ vars.DB_PORT }}" >> .env
          echo DB_USER="${{ vars.DB_USER }}" >> .env
          echo DB_PASS="${{ vars.DB_PASS }}" >> .env
          echo DB_NAME="${{ vars.DB_NAME }}" >> .env
          echo DB_SCHEMA="${{ vars.DB_SCHEMA }}" >> .env
          echo DB_CONNECTION_LIMIT="${{ vars.DB_CONNECTION_LIMIT }}" >> .env
          echo DB_POOL_TIMEOUT="${{ vars.DB_POOL_TIMEOUT }}" >> .env
          echo DATABASE_URL="${{ vars.DATABASE_URL }}" >> .env
          echo JWT_SECRET_KEY="${{ vars.JWT_SECRET_KEY }}" >> .env

          docker compose -f docker-compose.dev.yml build

      - name: Push the Docker image
        run: docker compose -f docker-compose.dev.yml push

      - name: Deploying via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SSH_HOST }}
          username: ${{ secrets.DEV_SSH_USER }}
          key: ${{ secrets.DEV_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SSH_PORT }}
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status.

            cd ${{ secrets.DEV_DIRECTORY }}

            git reset --hard
            git pull origin dev --rebase
            docker compose -f docker-compose.dev.yml pull
            docker compose -f docker-compose.dev.yml down --remove-orphans
            docker compose -f docker-compose.dev.yml up -d
            docker system prune -f 
            docker image prune -f
